version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.4.0 
  aws-eks: circleci/aws-eks@1.1.0

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys: 
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run: 
          name: install dependencies
          command: |

            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run: 
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - run: 
          name: run tests
          command: |
            . venv/bin/activate
            make test
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies{{ checksum "requirements.txt" }}

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
          
  # build docker image 
  build-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: build and upload docker container
          no_output_timeout: 10m
          command: |
            ./run_docker.sh
            ./upload_docker.sh ${DOCKER_USERNAME} ${DOCKER_PASSWORD} ${DOCKERTAG_VERSION}

  # create kubernetes cluster 
  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          The name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  # run service.yml to create load blaancer 
  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          The name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.yml
          resource-name: service-rollingLB

  # run deployment.yml to create rolling update deployment
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          The name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-rolling-update

  # test-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         The name of the EKS cluster
  #       type: string
  #   steps:
  #     - kubernetes/install
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #     - run:
  #         command: |
  #           kubectl get services
  #         name: Test cluster


workflows:
  deployment:
    jobs:
      - build
      - create-small-cluster:
          cluster-name: capstone-deployment
          requires:
            - build
      - test-cluster:
          cluster-name: capstone-deployment
          requires:
            - create-small-cluster
      - build-docker:
          requires:
            - test-cluster
      # - create-small-cluster:
      #     cluster-name: capstone-deployment
      # - create-service:
      #     cluster-name: capstone-deployment
      #     requires:
      #       - create-small-cluster
      # - create-deployment:
      #     cluster-name: capstone-deployment
      #     requires:
      #       - create-service







  #     - aws-eks/create-cluster:
  #         cluster-name: my-eks-demo
  #     - test-cluster:
  #         cluster-name: my-eks-demo
  #         requires:
  #           - aws-eks/create-cluster

  #     - aws-eks/delete-cluster:
  #         cluster-name: my-eks-demo
  #         requires:
  #           - test-cluster


  # create-deployment:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #   steps:
  #     - checkout
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
  #     - kubernetes/create-or-update-resource:
  #         get-rollout-status: true
  #         resource-file-path: tests/nginx-deployment/deployment.yaml
  #         resource-name: deployment/nginx-deployment